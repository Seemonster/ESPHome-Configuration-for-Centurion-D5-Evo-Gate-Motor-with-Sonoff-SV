esphome:
  name: gate
  friendly_name: Centurion D5 Evo
  comment: Control your Centurion D5 Evo gate motor remotely.

esp8266:
  board: sonoff_sv
  restore_from_flash: true

preferences:
  flash_write_interval: 1min

logger:
  level: DEBUG

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  ap:
    ssid: Gate Fallback Hotspot
    password: !secret fallback_password

captive_portal:

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    name: Gate Button
  - platform: status
    name: Gate Status
  - platform: gpio
    pin: GPIO5
    id: status_led
    name: "Status LED"
    entity_category: diagnostic
    icon: mdi:led-outline
    disabled_by_default: true
    publish_initial_state: true
    filters:
        delayed_on_off: 100ms
    on_multi_click:
      - timing: # Closed
          - OFF for at least 2000ms
        then:
          - logger.log: "Closed"
          - text_sensor.template.publish:
              id: gate_status
              state: "Closed"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Open
          - ON for at least 2000ms
        then:
          - logger.log: "Open"
          - text_sensor.template.publish:
              id: gate_status
              state: "Open"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Closing
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        then:
          - logger.log: "Closing"
          - text_sensor.template.publish:
              id: gate_status
              state: "Closing"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Opening
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
        then:
          - logger.log: "Opening"
          - text_sensor.template.publish:
              id: gate_status
              state: "Opening"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Pillar light override
          - ON for 200ms to 300ms
          - OFF for 1700ms to 1800ms
        then:
          - logger.log: "Pillar light override"
          - text_sensor.template.publish:
              id: gate_status
              state: "Pillar light override"
        invalid_cooldown: 100ms

      - timing: # No Mains
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 1200ms to 1400ms
        then:
          - logger.log: "No Mains"
          - text_sensor.template.publish:
              id: gate_status
              state: "No Mains"
        invalid_cooldown: 100ms

      - timing: # Battery Low
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 500ms to 1000ms
        then:
          - logger.log: "Low Battery"
          - text_sensor.template.publish:
              id: gate_status
              state: "Low Battery"
        invalid_cooldown: 100ms
cover:
  - platform: template
    name: "Gate"
    device_class: gate
    id: gate
    lambda: |-
      if (id(gate_status).state == "Open") {
        return COVER_OPEN;
      } else if (id(gate_status).state == "Closed") {
        return COVER_CLOSED;
      } else {
        return {};
      }

# # Sensors for ESP version and WIFI information
text_sensor:
  - platform: template
    icon: mdi:information-outline
    id: gate_status
    name: "Status"

switch:
  - platform: gpio
    name: Gate
    icon: mdi:gate
    pin: GPIO12
    id: relay
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay
